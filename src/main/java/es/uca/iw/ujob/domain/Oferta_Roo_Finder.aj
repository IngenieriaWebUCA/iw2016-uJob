// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.ujob.domain;

import es.uca.iw.ujob.domain.Localizacion;
import es.uca.iw.ujob.domain.Oferta;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Oferta_Roo_Finder {
    
    public static Long Oferta.countFindOfertasByPuestoLikeAndTipo_contratoLikeAndSueldoBetweenAndPerfilLikeAndLocalizacion(String puesto, String tipo_contrato, Float minSueldo, Float maxSueldo, String perfil, Localizacion localizacion) {
        if (puesto == null || puesto.length() == 0) throw new IllegalArgumentException("The puesto argument is required");
        puesto = puesto.replace('*', '%');
        if (puesto.charAt(0) != '%') {
            puesto = "%" + puesto;
        }
        if (puesto.charAt(puesto.length() - 1) != '%') {
            puesto = puesto + "%";
        }
        if (tipo_contrato == null || tipo_contrato.length() == 0) throw new IllegalArgumentException("The tipo_contrato argument is required");
        tipo_contrato = tipo_contrato.replace('*', '%');
        if (tipo_contrato.charAt(0) != '%') {
            tipo_contrato = "%" + tipo_contrato;
        }
        if (tipo_contrato.charAt(tipo_contrato.length() - 1) != '%') {
            tipo_contrato = tipo_contrato + "%";
        }
        if (minSueldo == null) throw new IllegalArgumentException("The minSueldo argument is required");
        if (maxSueldo == null) throw new IllegalArgumentException("The maxSueldo argument is required");
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        perfil = perfil.replace('*', '%');
        if (perfil.charAt(0) != '%') {
            perfil = "%" + perfil;
        }
        if (perfil.charAt(perfil.length() - 1) != '%') {
            perfil = perfil + "%";
        }
        if (localizacion == null) throw new IllegalArgumentException("The localizacion argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Oferta AS o WHERE LOWER(o.puesto) LIKE LOWER(:puesto)  AND LOWER(o.tipo_contrato) LIKE LOWER(:tipo_contrato)  AND o.sueldo BETWEEN :minSueldo AND :maxSueldo  AND LOWER(o.perfil) LIKE LOWER(:perfil)  AND o.localizacion = :localizacion", Long.class);
        q.setParameter("puesto", puesto);
        q.setParameter("tipo_contrato", tipo_contrato);
        q.setParameter("minSueldo", minSueldo);
        q.setParameter("maxSueldo", maxSueldo);
        q.setParameter("perfil", perfil);
        q.setParameter("localizacion", localizacion);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Oferta> Oferta.findOfertasByPuestoLikeAndTipo_contratoLikeAndSueldoBetweenAndPerfilLikeAndLocalizacion(String puesto, String tipo_contrato, Float minSueldo, Float maxSueldo, String perfil, Localizacion localizacion) {
        if (puesto == null || puesto.length() == 0) throw new IllegalArgumentException("The puesto argument is required");
        puesto = puesto.replace('*', '%');
        if (puesto.charAt(0) != '%') {
            puesto = "%" + puesto;
        }
        if (puesto.charAt(puesto.length() - 1) != '%') {
            puesto = puesto + "%";
        }
        if (tipo_contrato == null || tipo_contrato.length() == 0) throw new IllegalArgumentException("The tipo_contrato argument is required");
        tipo_contrato = tipo_contrato.replace('*', '%');
        if (tipo_contrato.charAt(0) != '%') {
            tipo_contrato = "%" + tipo_contrato;
        }
        if (tipo_contrato.charAt(tipo_contrato.length() - 1) != '%') {
            tipo_contrato = tipo_contrato + "%";
        }
        if (minSueldo == null) throw new IllegalArgumentException("The minSueldo argument is required");
        if (maxSueldo == null) throw new IllegalArgumentException("The maxSueldo argument is required");
        if (perfil == null || perfil.length() == 0) throw new IllegalArgumentException("The perfil argument is required");
        perfil = perfil.replace('*', '%');
        if (perfil.charAt(0) != '%') {
            perfil = "%" + perfil;
        }
        if (perfil.charAt(perfil.length() - 1) != '%') {
            perfil = perfil + "%";
        }
        if (localizacion == null) throw new IllegalArgumentException("The localizacion argument is required");
        EntityManager em = Oferta.entityManager();
        TypedQuery<Oferta> q = em.createQuery("SELECT o FROM Oferta AS o WHERE LOWER(o.puesto) LIKE LOWER(:puesto)  AND LOWER(o.tipo_contrato) LIKE LOWER(:tipo_contrato)  AND o.sueldo BETWEEN :minSueldo AND :maxSueldo  AND LOWER(o.perfil) LIKE LOWER(:perfil)  AND o.localizacion = :localizacion", Oferta.class);
        q.setParameter("puesto", puesto);
        q.setParameter("tipo_contrato", tipo_contrato);
        q.setParameter("minSueldo", minSueldo);
        q.setParameter("maxSueldo", maxSueldo);
        q.setParameter("perfil", perfil);
        q.setParameter("localizacion", localizacion);
        return q;
    }
    
}
